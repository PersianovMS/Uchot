#Область БИБЛИОТЕКА_ФУНКЦИЙ

#Область ТИПЫ

//Возвращает описание типов "любая ссылка"
//Возвращаемое значение:
//	Описание типов - Описание типов, содержащее все ссылочные типы
Функция ВсеСсылочныеТипы() Экспорт
	Результат = Новый ОписаниеТипов(Документы.ТипВсеСсылки(), Перечисления.ТипВсеСсылки().Типы());
	Результат = Новый ОписаниеТипов(Результат, Справочники.ТипВсеСсылки().Типы());
	Результат = Новый ОписаниеТипов(Результат, ПланыВидовРасчета.ТипВсеСсылки().Типы());
	Результат = Новый ОписаниеТипов(Результат, ПланыВидовХарактеристик.ТипВсеСсылки().Типы());
	Результат = Новый ОписаниеТипов(Результат, ПланыОбмена.ТипВсеСсылки().Типы());
	Результат = Новый ОписаниеТипов(Результат, ПланыСчетов.ТипВсеСсылки().Типы());
	Результат = Новый ОписаниеТипов(Результат, БизнесПроцессы.ТипВсеСсылки().Типы());
	Результат = Новый ОписаниеТипов(Результат, БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().Типы());
	Возврат Новый ОписаниеТипов(Результат, Задачи.ТипВсеСсылки().Типы());
КонецФункции // ВсеСсылочныеТипы()

//!!!Похоже, не работает, т.к. ругается на первый параметр (Тип):Несоответствие типов (параметр номер '1') (Неверный тип параметра. Допустимы только примитивные типы, ссылки, Структура)
//Функция продублирована в ВОЛНА_ОбщегоНазначенияВС, но это по возможности надо исправить
//Возвращает имя таблицы для запроса по переданному типу плюс доп. данные
//Параметры:
//	Тип_ - Тип - Тип, имя таблицы по которому надо получить.
//	Полностью - Булево или Строка - Определяет тип возвращаемого значения. Если Истина, то структура с ключами:
//		* ИмяТаблицы - Строка - Имя таблицы для запроса;
//		* Текст - Строка - То же имя, но без точки, как автоматически именуется имя таблицы
//		* Метаданные - Объект метаданных - соответствующий объекту
//		* Менеджер - Менеджер объекта (СправочникМенеджер.ПрезидентыРФ...).
//		Если Ложь (по умолчанию), тогда возвращается строка, как в ключе ИмяТаблицы.
//		Если Строка с именами полей через запятую, тогда возвращается структура только с этими полями (Например, "Текст,Менеджер")
//Возвращаемое значение -  структура или строка -  описано выше, например, "Документ.ИнаугурацияПрезидентаРФ".
Функция ИмяТаблицыОбъектаПоТипу(Тип_, Полностью = Ложь) Экспорт
	МетаХ = Метаданные.НайтиПоТипу(Тип_);
	Если МетаХ = Неопределено Тогда
		Результат = Неопределено
	ИначеЕсли Полностью = "Метаданные" Тогда
		Результат = МетаХ;
	Иначе
		ТекИмя = МетаХ.Имя;
		Полная = Новый Структура;
		НуженМенеджер = (Найти("," + Полностью + ",", ",Менеджер,") > 0) ИЛИ (Полностью = Истина);
		Если Метаданные.Документы.Содержит(МетаХ) Тогда
			СтрокаТипа = "Документ";
			Если НуженМенеджер Тогда
				Полная.Вставить("Менеджер", Документы[ТекИмя]);
			КонецЕсли; 
		ИначеЕсли Метаданные.Справочники.Содержит(МетаХ) Тогда
			СтрокаТипа = "Справочник";
			Если НуженМенеджер Тогда
				Полная.Вставить("Менеджер", Справочники[ТекИмя]);
			КонецЕсли; 
		ИначеЕсли Метаданные.Перечисления.Содержит(МетаХ) Тогда
			СтрокаТипа = "Перечисление";
			Если НуженМенеджер Тогда
				Полная.Вставить("Менеджер", Перечисления[ТекИмя]);
			КонецЕсли; 
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаХ) Тогда
			СтрокаТипа = "ПланВидовХарактеристик";
			Если НуженМенеджер Тогда
				Полная.Вставить("Менеджер", ПланыВидовХарактеристик[ТекИмя]);
			КонецЕсли; 
		ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаХ) Тогда
			СтрокаТипа = "ПланСчетов";
			Если НуженМенеджер Тогда
				Полная.Вставить("Менеджер", ПланыСчетов[ТекИмя]);
			КонецЕсли; 
		ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаХ) Тогда
			СтрокаТипа = "ПланВидовРасчета";
			Если НуженМенеджер Тогда
				Полная.Вставить("Менеджер", ПланыВидовРасчета[ТекИмя]);
			КонецЕсли; 
		ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаХ) Тогда
			СтрокаТипа = "БизнесПроцесс";
			Если НуженМенеджер Тогда
				Полная.Вставить("Менеджер", БизнесПроцессы[ТекИмя]);
			КонецЕсли; 
		ИначеЕсли Метаданные.Задачи.Содержит(МетаХ) Тогда
			СтрокаТипа = "Задача";
			Если НуженМенеджер Тогда
				Полная.Вставить("Менеджер", Задачи[ТекИмя]);
			КонецЕсли; 
		Иначе
			Результат = "";
		КонецЕсли; 
		Если ?(Полностью = Истина, Истина, ?(Полностью = Ложь, Истина, Найти("," + Полностью + ",", ",ИмяТаблицы,") > 0)) Тогда
			Полная.Вставить("ИмяТаблицы", СтрокаТипа + "." + ТекИмя);
		КонецЕсли; 
		Если ?(Полностью = Истина, Истина, Найти("," + Полностью + ",", ",Текст,") > 0) Тогда
			Полная.Вставить("Текст", СтрокаТипа + ТекИмя);
		КонецЕсли; 
		Если ?(Полностью = Истина, Истина, Найти("," + Полностью + ",", ",Метаданные,") > 0) Тогда
			Полная.Вставить("Метаданные", МетаХ);
		КонецЕсли;
		Результат = Полная;
		Если Результат.Количество() = 1 Тогда
			Для каждого КиЗ Из Полная Цикл
				Результат = КиЗ.Значение;
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	Возврат Результат
КонецФункции // ИмяТаблицыОбъектаПоТипу()

#КонецОбласти

#Область ДЕРЕВО_МД
	
//Заполняет дерево метаданных по ветви метаданных.
//Параметры:
//	ВетвьДерева - Строка дерева значений или дерево значений - Заполняемый объект	
//	ВетвьМД - Объект метаданных - Источник данных для заполнения	
//	Префикс - Строка - Указывается перед пользовательским представлением элемента	
//	СброситьПрефикс - Булево - не указывать представление родителя в представлении элемента	для кода или запроса.
//	Очищать - Булево - Очистить дерево перед заполненияем
//	ЗаполнятьВетви - Булево - При Истина заполняет на всю глубину, при Ложь - без вложенных ветвей (намного быстрее, по умолчанию).	
Процедура ЗаполнитьДеревоМД(ВетвьДерева, ВетвьМД = Неопределено, Префикс = "", СброситьПрефикс = Ложь, Очищать = Ложь, ЗаполнятьВетви = Ложь) Экспорт
	ЭтоДуб = ТипЗнч(ВетвьДерева) = Тип("ДеревоЗначений");
	Если ЭтоДуб Тогда
		Если ВетвьДерева.Колонки.Найти("Представление") = Неопределено Тогда
			ВетвьДерева.Колонки.Добавить("Представление");
		КонецЕсли;
		Если ВетвьДерева.Колонки.Найти("ТекстДляКода") = Неопределено Тогда
			ВетвьДерева.Колонки.Добавить("ТекстДляКода");
		КонецЕсли;
		Если ВетвьДерева.Колонки.Найти("ТекстДляЗапроса") = Неопределено Тогда
			ВетвьДерева.Колонки.Добавить("ТекстДляЗапроса");
		КонецЕсли;
		Если ВетвьДерева.Колонки.Найти("МД") = Неопределено Тогда
			ВетвьДерева.Колонки.Добавить("МД",,, 0);
		КонецЕсли;
	КонецЕсли;
	Если Очищать Тогда
		ВетвьДерева.Строки.Очистить()
	КонецЕсли;
	Продолжать = (ВетвьДерева.Строки.Количество() = 0) ИЛИ НЕ ЭтоДуб;
	Если Продолжать Тогда
		Если ВетвьМД = Неопределено Тогда
			НоваяСтрокаДерева = ВетвьДерева.Строки.Добавить();
			НоваяСтрокаДерева.Представление = "Справочники";
			НоваяСтрокаДерева.ТекстДляКода = "Справочники";
			НоваяСтрокаДерева.ТекстДляЗапроса = "Справочник";
			НоваяСтрокаДерева.МД = Метаданные.Справочники;
			Если ЗаполнятьВетви Тогда
				ЗаполнитьДеревоМД(НоваяСтрокаДерева, Метаданные.Справочники);
			КонецЕсли; 
			НоваяСтрокаДерева = ВетвьДерева.Строки.Добавить();
			НоваяСтрокаДерева.Представление = "Документы";
			НоваяСтрокаДерева.ТекстДляКода = "Документы";
			НоваяСтрокаДерева.ТекстДляЗапроса = "Документ";
			НоваяСтрокаДерева.МД = Метаданные.Документы;
			Если ЗаполнятьВетви Тогда
				ЗаполнитьДеревоМД(НоваяСтрокаДерева, Метаданные.Документы);
			КонецЕсли; 
			НоваяСтрокаДерева = ВетвьДерева.Строки.Добавить();
			НоваяСтрокаДерева.Представление = "Перечисления";
			НоваяСтрокаДерева.ТекстДляКода = "Перечисления";
			НоваяСтрокаДерева.ТекстДляЗапроса = "Перечисление";
			НоваяСтрокаДерева.МД = Метаданные.Перечисления;
			Если ЗаполнятьВетви Тогда
				ЗаполнитьДеревоМД(НоваяСтрокаДерева, Метаданные.Перечисления);
			КонецЕсли; 
			НоваяСтрокаДерева = ВетвьДерева.Строки.Добавить();
			НоваяСтрокаДерева.Представление = "Планы счетов";
			НоваяСтрокаДерева.ТекстДляКода = "ПланыСчетов";
			НоваяСтрокаДерева.ТекстДляЗапроса = "ПланСчетов";
			НоваяСтрокаДерева.МД = Метаданные.ПланыСчетов;
			Если ЗаполнятьВетви Тогда
				ЗаполнитьДеревоМД(НоваяСтрокаДерева, Метаданные.ПланыСчетов);
			КонецЕсли; 
			НоваяСтрокаДерева = ВетвьДерева.Строки.Добавить();
			НоваяСтрокаДерева.Представление = "Планы видов расчетов";
			НоваяСтрокаДерева.ТекстДляКода = "ПланыВидовРасчетов";
			НоваяСтрокаДерева.ТекстДляЗапроса = "ПланВидовРасчетов";
			НоваяСтрокаДерева.МД = Метаданные.ПланыВидовРасчета;
			Если ЗаполнятьВетви Тогда
				ЗаполнитьДеревоМД(НоваяСтрокаДерева, Метаданные.ПланыВидовРасчета);
			КонецЕсли; 
			НоваяСтрокаДерева = ВетвьДерева.Строки.Добавить();
			НоваяСтрокаДерева.Представление = "Планы обмена";
			НоваяСтрокаДерева.ТекстДляКода = "ПланыОбмена";
			НоваяСтрокаДерева.ТекстДляЗапроса = "ПланОбмена";
			НоваяСтрокаДерева.МД = Метаданные.ПланыОбмена;
			Если ЗаполнятьВетви Тогда
				ЗаполнитьДеревоМД(НоваяСтрокаДерева, Метаданные.ПланыОбмена);
			КонецЕсли; 
			НоваяСтрокаДерева = ВетвьДерева.Строки.Добавить();
			НоваяСтрокаДерева.Представление = "Планы видов характеристик";
			НоваяСтрокаДерева.ТекстДляКода = "ПланыВидовХарактеристик";
			НоваяСтрокаДерева.ТекстДляЗапроса = "ПланВидовХарактеристик";
			НоваяСтрокаДерева.МД = Метаданные.ПланыВидовХарактеристик;
			Если ЗаполнятьВетви Тогда
				ЗаполнитьДеревоМД(НоваяСтрокаДерева, Метаданные.ПланыВидовХарактеристик);
			КонецЕсли; 
			НоваяСтрокаДерева = ВетвьДерева.Строки.Добавить();
			НоваяСтрокаДерева.Представление = "Регистры накопления";
			НоваяСтрокаДерева.ТекстДляКода = "РегистрыНакопления";
			НоваяСтрокаДерева.ТекстДляЗапроса = "РегистрНакопления";
			НоваяСтрокаДерева.МД = Метаданные.РегистрыНакопления;
			Если ЗаполнятьВетви Тогда
				ЗаполнитьДеревоМД(НоваяСтрокаДерева, Метаданные.РегистрыНакопления);
			КонецЕсли; 
			НоваяСтрокаДерева = ВетвьДерева.Строки.Добавить();
			НоваяСтрокаДерева.Представление = "Регистры бухгалтерии";
			НоваяСтрокаДерева.ТекстДляКода = "РегистрыБухгалтерии";
			НоваяСтрокаДерева.ТекстДляЗапроса = "РегистрБухгалтерии";
			НоваяСтрокаДерева.МД = Метаданные.РегистрыБухгалтерии;
			Если ЗаполнятьВетви Тогда
				ЗаполнитьДеревоМД(НоваяСтрокаДерева, Метаданные.РегистрыБухгалтерии);
			КонецЕсли; 
			НоваяСтрокаДерева = ВетвьДерева.Строки.Добавить();
			НоваяСтрокаДерева.Представление = "Регистры расчёта";
			НоваяСтрокаДерева.ТекстДляКода = "РегистрыРасчета";
			НоваяСтрокаДерева.ТекстДляЗапроса = "РегистрРасчета";
			НоваяСтрокаДерева.МД = Метаданные.РегистрыРасчета;
			Если ЗаполнятьВетви Тогда
				ЗаполнитьДеревоМД(НоваяСтрокаДерева, Метаданные.РегистрыРасчета);
			КонецЕсли; 
			НоваяСтрокаДерева = ВетвьДерева.Строки.Добавить();
			НоваяСтрокаДерева.Представление = "Регистры сведений";
			НоваяСтрокаДерева.ТекстДляКода = "РегистрыСведений";
			НоваяСтрокаДерева.ТекстДляЗапроса = "РегистрСведений";
			НоваяСтрокаДерева.МД = Метаданные.РегистрыСведений;
			Если ЗаполнятьВетви Тогда
				ЗаполнитьДеревоМД(НоваяСтрокаДерева, Метаданные.РегистрыСведений);
			КонецЕсли; 
			НоваяСтрокаДерева = ВетвьДерева.Строки.Добавить();
			НоваяСтрокаДерева.Представление = "Бизнес-процессы";
			НоваяСтрокаДерева.ТекстДляКода = "БизнесПроцессы";
			НоваяСтрокаДерева.ТекстДляЗапроса = "БизнесПроцесс";
			НоваяСтрокаДерева.МД = Метаданные.БизнесПроцессы;
			Если ЗаполнятьВетви Тогда
				ЗаполнитьДеревоМД(НоваяСтрокаДерева, Метаданные.БизнесПроцессы);
			КонецЕсли; 
			НоваяСтрокаДерева = ВетвьДерева.Строки.Добавить();
			НоваяСтрокаДерева.Представление = "Задачи";
			НоваяСтрокаДерева.ТекстДляКода = "Задачи";
			НоваяСтрокаДерева.ТекстДляЗапроса = "Задачи";
			НоваяСтрокаДерева.МД = Метаданные.Задачи;
			Если ЗаполнятьВетви Тогда
				ЗаполнитьДеревоМД(НоваяСтрокаДерева, Метаданные.Задачи);
			КонецЕсли; 
		Иначе
			Если ТипЗнч(ВетвьМД) <> Тип("КоллекцияОбъектовМетаданных") Тогда //ВетвьДерева.СПопыткой Тогда
				ПродолжитьЗаполнениеМД(ВетвьДерева, ВетвьМД);
			Иначе
				Для Каждого ОбъектМД Из ВетвьМД Цикл
					НоваяСтрокаДерева = ВетвьДерева.Строки.Добавить();
					НоваяСтрокаДерева.Представление = ОбъектМД.Синоним;
					Если ПустаяСтрока(НоваяСтрокаДерева.Представление) Тогда
						НоваяСтрокаДерева.Представление = ОбъектМД.Имя
					КонецЕсли;
					НоваяСтрокаДерева.Представление = "" + Префикс + НоваяСтрокаДерева.Представление;
					НоваяСтрокаДерева.ТекстДляКода = ?(СброситьПрефикс, "", ВетвьДерева.ТекстДляКода + ".") + ОбъектМД.Имя;
					НоваяСтрокаДерева.ТекстДляЗапроса = ?(СброситьПрефикс, "", ВетвьДерева.ТекстДляЗапроса + "." + ОбъектМД.Имя);
					НоваяСтрокаДерева.МД = ОбъектМД;
					//НоваяСтрокаДерева.СПопыткой = Истина;
					Если ЗаполнятьВетви Тогда
						ПродолжитьЗаполнениеМД(НоваяСтрокаДерева, ОбъектМД);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ЗаполнитьМД

//Вспомогательная для следующей процедуры. Заполняет ветвь дерева значений по реквизиту объекта метаданных.
//Параметры:
//	ВетвьДерева - Строка дерева значений или дерево значений - Заполняемый объект	
//	ОбъектМД - Объект метаданных - Источник данных для заполнения	
//	ИмяМД - Строка - Имя реквизита объекта метаданных, по которому надо заполнить ветвь	
//	Префикс - Строка - Указывается перед пользовательским представлением элемента	
//	СброситьПрефикс - Булево - не указывать представление родителя в представлении элемента	для кода или запроса.
Процедура ВызватьЗаполнениеСПопыткой(ВетвьДерева, ОбъектМД, ИмяМД, Префикс = "", СброситьПрефикс = Ложь)
	Попытка
		Коллекция = ОбъектМД[ИмяМД];
	Исключение
		Коллекция = Неопределено
	КонецПопытки;
	Если Коллекция <> Неопределено Тогда
		ЗаполнитьДеревоМД(ВетвьДерева, Коллекция, Префикс, СброситьПрефикс,, Истина)
	КонецЕсли;
КонецПроцедуры
				
//Вспомогательная для предыдущей экспортной процедуры. Заполняет строку дерева по объекту метаданных.
//Параметры:
//	ВетвьДерева - Строка дерева значений или дерево значений - Заполняемый объект	
//	ОбъектМД - Объект метаданных - Источник данных для заполнения	
Процедура ПродолжитьЗаполнениеМД(НоваяСтрокаДерева, ОбъектМД)
	ВызватьЗаполнениеСПопыткой(НоваяСтрокаДерева, ОбъектМД, "Реквизиты");
	ВызватьЗаполнениеСПопыткой(НоваяСтрокаДерева, ОбъектМД, "СтандартныеРеквизиты");
	ВызватьЗаполнениеСПопыткой(НоваяСтрокаДерева, ОбъектМД, "ТабличныеЧасти", "#");
	ВызватьЗаполнениеСПопыткой(НоваяСтрокаДерева, ОбъектМД, "Формы", "^", Истина);
	ВызватьЗаполнениеСПопыткой(НоваяСтрокаДерева, ОбъектМД, "Макеты", "$", Истина);
	ВызватьЗаполнениеСПопыткой(НоваяСтрокаДерева, ОбъектМД, "ЗначенияПеречисления");
	ВызватьЗаполнениеСПопыткой(НоваяСтрокаДерева, ОбъектМД, "Команды", ">", Истина);
	НоваяСтрокаДерева.Строки.Сортировать("Представление", Ложь, Новый СравнениеЗначений)
КонецПроцедуры //ПродолжитьЗаполнениеМД

#КонецОбласти 

#Область ЭТА_КОНФИГУРАЦИЯ
	
//Возвращает структуру с ключами ЕстьДК, ЕстьДО, ЕстьПП и ЕстьВО - есть ли 
// 	регистр ВОЛНА_ДопКонстанты и справочники ДополнительныеОбработки, ВОЛНА_ПереопределяемыеПроцедуры и ВнешниеОтчеты.
//Возвращаемое значение:
//	Структура - ключи ЕстьДК, ЕстьДО, ЕстьПП и ЕстьВО, отражающие наличие объектов внешних обработок и значений разного типа.
Функция ЕстьДопОбработки() Экспорт
	ИмяТипаПП = "ВОЛНА_ПереопределяемыеПроцедуры";
	ИмяТипаВО = "ВнешниеОбработки";
	ИмяТипаДО = "ДополнительныеОтчетыИОбработки";
	ИмяТипаДК = "ВОЛНА_ДопКонстанты";
	Возврат Новый Структура("ЕстьДК,ЕстьДО,ЕстьПП,ЕстьВО,ИмяТипаДК,ИмяТипаДО,ИмяТипаПП,ИмяТипаВО",
			Метаданные.РегистрыСведений.Найти(ИмяТипаДК) <> Неопределено,
			Метаданные.Справочники.Найти(ИмяТипаДО) <> Неопределено,
			Метаданные.Справочники.Найти(ИмяТипаПП) <> Неопределено,
			Метаданные.Справочники.Найти(ИмяТипаВО) <> Неопределено,
			ИмяТипаДК,
			ИмяТипаДО,
			ИмяТипаПП,
			ИмяТипаВО)
КонецФункции // ЕстьДопОбработки()

// РежимыСовместимости
// Возвращаемое значение:
//   Структура   - Ключи Режим (значение - текущий режим) и Р835 (булево, Истина - мы в допотопном 835, до поддержки строковых функций.)
Функция РежимСовместимости() Экспорт
	МетаК = Метаданные;
	Режим = МетаК.РежимСовместимости;
	МетаРС = Метаданные.СвойстваОбъектов.РежимСовместимости;
	Результат = Новый Структура("Режим,Р835", Режим, (Режим = МетаРС.Версия8_1) ИЛИ (Режим = МетаРС.Версия8_2_13) ИЛИ (Режим = МетаРС.Версия8_2_16) ИЛИ (Режим = МетаРС.Версия8_3_1)
			ИЛИ (Режим = МетаРС.Версия8_3_2) ИЛИ (Режим = МетаРС.Версия8_3_3) ИЛИ (Режим = МетаРС.Версия8_3_4) ИЛИ (Режим = МетаРС.Версия8_3_5));
	Возврат Результат
КонецФункции // РежимСовместимости

//Возвращает версию БСП
//Возвращаемое значение:
//	Строка - версия библиотеки стандартных подсистем
Функция ВерсияБСП() Экспорт
	Попытка
		Результат = Вычислить("СтандартныеПодсистемыСервер.ВерсияБиблиотеки()");
	Исключение
		Результат = "Нет БСП";
	КонецПопытки;
	Возврат Результат
КонецФункции // ВерсияБСП()

//Возвращает информацию о наличии подсистемы
//Параметры:
//	ИмяПодсистемы - Строка - Имя искомой подсистемы
//Возвращаемое значение:
//	Булево - Подсистема есть
Функция ЕстьПодсистема(ИмяПодсистемы) Экспорт
	Возврат Подсистемы(Истина).Найти(ИмяПодсистемы) <> Неопределено
КонецФункции

// Возвращает линейный список подсистем
// Параметры:
//   Строки - Булево - Ложь = элементами являются метаданные (по умолчанию), а не строки
// Возвращаемое значение:
//      - Массив подистем или их имён.
Функция Подсистемы(Строки = Ложь, Родительская = Неопределено) Экспорт
	Если Родительская = Неопределено Тогда
		Родительская = Метаданные;
	КонецЕсли;
	Результат = Новый Массив;
	Для каждого ТекПодсистема Из Родительская.Подсистемы Цикл
		Результат.Добавить(?(Строки, ТекПодсистема.Имя, ТекПодсистема));
		Результат = ВОЛНА_ОбщегоНазначения_КлиентСервер.СложитьМассивы(Результат, Подсистемы(Строки, ТекПодсистема));
	КонецЦикла;
	Возврат Результат
КонецФункции // Подсистемы

//Возвращает список картинок библиотеки (из макета, иначе не знаю, как получить) - префикс #Б:
//и из общих картинок - префикс #О:. Результат помещается в список значений, где представление - имя картинки,
//значение - имя картинки с префиксом, а картинка - сама картинка.
//Параметры:
//	СписокКартинокБиблиотеки - Строка - Список картинок библиотеки картинок с разделителем ПС. Способа прочитать этот список программно не нашёл, приходится передавать параметром.
//			Если не задан (пустая строка), производится попытка чтения из макета "КартинкиБиблиотеки"
//	ВставлятьКартинки - Булево - Вставлять в список сами картинки.
//Возвращаемое значение:
//	Список значений - список картинок из параметра и из общих картинок.
Функция ПолучитьСписокСтандартныхКартинок(СписокКартинокБиблиотеки = "", ВставлятьКартинки = Истина) Экспорт
	Результат = Новый СписокЗначений;
	Если СписокКартинокБиблиотеки = "" Тогда
		Попытка
			СписокКартинокБиблиотеки = Вычислить("ПолучитьМакет(""КартинкиБиблиотеки"").ПолучитьТекст()");
		Исключение
		КонецПопытки;
	КонецЕсли; 
	Для Ё = 1 По СтрЧислоСтрок(СписокКартинокБиблиотеки) Цикл
		ИмяК = СтрПолучитьСтроку(СписокКартинокБиблиотеки, Ё);
		Попытка
			ТКартинка = БиблиотекаКартинок[ИмяК];
			Результат.Добавить("#Б:" + ИмяК, ИмяК, Ложь, ?(ВставлятьКартинки, ТКартинка, ""));
		Исключение
		КонецПопытки;
	КонецЦикла; 
	Для каждого ТКартинка Из Метаданные.ОбщиеКартинки Цикл
		Результат.Добавить("#О:" + ТКартинка.Имя, ТКартинка.Синоним, Ложь, ?(ВставлятьКартинки, БиблиотекаКартинок[ТКартинка.Имя], ""));
	КонецЦикла; 
	Возврат Результат
КонецФункции // ПолучитьСписокСтандартныхКартинок()
 
#КонецОбласти

#КонецОбласти