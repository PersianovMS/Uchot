#Область ПРОГРАММНЫЙ_ИНТЕРФЕЙС
	
&НаКлиенте
Процедура ПослеЗаполнения() Экспорт
	ЗаполнитьШапкуНаСервере(Ложь);
	ПрисвоитьПорядковыеНомера();
	ПересчитатьОстатки();
КонецПроцедуры

#КонецОбласти

#Область СОБЫТИЯ_ФОРМЫ
	
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.Источник = Новый ХранилищеЗначения(СохранённыйИсточник);
	Если ЗначениеЗаполнено(СсылкаНового) Тогда
		ТекущийОбъект.УстановитьСсылкуНового(СсылкаНового);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	СсылкаНового = Документы.ВводДенег.ПустаяСсылка();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПересчитатьОстатки()
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПересчитатьОстатки();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Настоящий = РеквизитФормыВЗначение("Объект");
	СохранённыйИсточник = Настоящий.Источник.Получить();
	Если Настоящий.ЭтоНовый() Тогда
		СсылкаНового = Документы.ВводДенег.ПолучитьСсылку(Новый УникальныйИдентификатор);
	КонецЕсли;
	СтатьяНевыясненных = Константы.СтатьяНевыясненных.Получить();
	ОбновитьПоследнююОперацию();
КонецПроцедуры

#КонецОбласти

#Область СОБЫТИЯ_ЭЛЕМЕНТОВ
	
&НаКлиенте
Процедура КошелёкПриИзменении(Элемент)
	ЗаполнитьШапкуНаСервере(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СоставПриИзменении(Элемент)
	ПрисвоитьПорядковыеНомера();
	ПересчитатьОстатки();
	АвтоСтатья();
КонецПроцедуры

&НаКлиенте
Процедура СПриИзменении(Элемент)
	ОбновитьПоследнююОперацию();
КонецПроцедуры

#КонецОбласти

#Область КОМАНДЫ
	
&НаКлиенте
Процедура ЗаполнитьИзТД(Команда)
	ЗаполнитьПоТД()
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКорДокументы(Команда)
	КОткрытию = КорДокиСервер();//Соответствия Док/Кошелёк ==> Время,Статья,Сумма,ПоСсылке,ВводДенег
	ПределОткрытия = 15;
	Открыты = 0;
	Осталось = КОткрытию.Количество();
	//Если Лев(Объект.Ссылка, 1) = "<" Тогда
	//	Сообщить("Текущий документ не записан. Надо будет вручную проставить кордокументы в открытых окнах!");
	//КонецЕсли;
	//СооФорм = Новый Соответствие;
	Для каждого КиЗ_Д Из КОткрытию Цикл
		Модифицированность = Истина;
		ПоСсылке = ЗначениеЗаполнено(КиЗ_Д.Ключ);
		НадоОткрыть = ПоСсылке;
		Для каждого КиЗ_К Из КиЗ_Д.Значение Цикл
			Если НЕ ПоСсылке Тогда
				НоваяФорма = ОткрытьФорму("Документ.ВводДенег.ФормаОбъекта",,, КиЗ_К.Ключ);
				НоваяФорма.Объект.С = '39991231';
				НоваяФорма.Объект.По_ = '00000000';
				НоваяФорма.Объект.Кошелёк = КиЗ_К.Ключ;
				Открыты = Открыты + 1;
			КонецЕсли;
			Для каждого СтрЗаписи Из КиЗ_К.Значение Цикл
				Если СтрЗаписи.Сумма <> 0 Тогда
					Если НадоОткрыть Тогда
						НоваяФорма = ОткрытьФорму("Документ.ВводДенег.ФормаОбъекта", Новый Структура("Ключ", КиЗ_Д.Ключ));
						Открыты = Открыты + 1;
						НадоОткрыть = Ложь;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрЗаписи.НомерСтроки) Тогда
						НовСтрока = НоваяФорма.Объект.Состав[СтрЗаписи.НомерСтроки - 1];
						НовСтрока.Сумма = НовСтрока.Сумма + СтрЗаписи.Сумма;
					Иначе
						НомерСтроки = НоваяФорма.Объект.Состав.Количество() + 1;
						Для каждого СтрокаДФК Из НоваяФорма.Объект.Состав Цикл
							Если СтрокаДФК.Время <= СтрЗаписи.Время Тогда
								НомерСтроки = СтрокаДФК.НомерСтроки;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						НовСтрока = НоваяФорма.Объект.Состав.Вставить(НомерСтроки - 1);
						НовСтрока.Сумма = СтрЗаписи.Сумма;
					КонецЕсли;
					НовСтрока.Время = СтрЗаписи.Время;
					НовСтрока.Статья = СтрЗаписи.Статья;
					НовСтрока.КорКошелёк = Объект.Кошелёк;
					НовСтрока.КорДокумент = ?(ЗначениеЗаполнено(СсылкаНового), СсылкаНового, Объект.Ссылка);
					Если НоваяФорма.Объект.С > СтрЗаписи.Время Тогда
						НоваяФорма.Объект.С = СтрЗаписи.Время;
					КонецЕсли;
					Если НоваяФорма.Объект.По_ < СтрЗаписи.Время Тогда
						НоваяФорма.Объект.По_ = СтрЗаписи.Время;
					КонецЕсли;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(СтрЗаписи.ВводДенег) Тогда
					СтруктураПоиска = Новый Структура("Время,Статья,КорКошелёк,КорДокумент", СтрЗаписи.Время, СтрЗаписи.Статья, КиЗ_К.Ключ, СтрЗаписи.ВводДенег);
					Для каждого СтрСостава Из Объект.Состав.НайтиСтроки(СтруктураПоиска) Цикл
						СтрСостава.КорДокумент = ?(НадоОткрыть, КиЗ_Д.Ключ, ?(ЗначениеЗаполнено(НоваяФорма.СсылкаНового), НоваяФорма.СсылкаНового, НоваяФорма.Объект.Ссылка));
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ПоСсылке Тогда
				НоваяФорма.ПослеЗаполнения();
			КонецЕсли;
			Если Открыты = ПределОткрытия Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПоСсылке Тогда
			НоваяФорма.ПослеЗаполнения();
		КонецЕсли;
		Если Открыты = ПределОткрытия Тогда
			Прервать;
		КонецЕсли;
		Осталось = Осталось - 1;
	КонецЦикла;
	Если Открыты = ПределОткрытия Тогда
		Сообщить("Заполнены не все документы. Открыто " + ПределОткрытия + " форм, но осталось ещё необработанных строк: " + Осталось + ". Проведите открытые документы и повторите операцию");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШапку(Команда)
	Если ЗначениеЗаполнено(Объект.Кошелёк) Тогда
		ЗаполнитьШапкуНаСервере(Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьРаспознавание(Команда)
	ТекДанные = Элементы.Состав.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		НоваяФорма = ОткрытьФорму("Справочник.Распознавания.ФормаОбъекта");
		НоваяФорма.Объект.Наименование = ТекДанные.Комментарий;
		НоваяФорма.Объект.Комментарий = ТекДанные.Комментарий;
		НоваяФорма.Объект.Кошелёк = Объект.Кошелёк;
		НоваяФорма.Объект.КорКошелёк = ТекДанные.КорКошелёк;
		НоваяФорма.Объект.Статья = ТекДанные.Статья;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТДИзХранилища(Команда)
	ОткрытьТД_();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблонТД(Команда)
	ОткрытьШаблонНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПривестиКОстатку(Команда)
	ТекДанные = Элементы.Состав.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ПараметрыВыполнения = Новый Структура("СтараяСумма,ТекНС,ТекВремя,ТекУв,ТекВып",
				ТекДанные.ОстатокПослеОперации, ТекДанные.НомерСтроки, ТекДанные.Время, ТекДанные.ПорядокПоУведомлению, ТекДанные.ПорядокПоВыписке);
		ПоказатьВводЧисла(Новый ОписаниеОповещения("ПродолжитьПриведениеКОстатку", ЭтотОбъект , ПараметрыВыполнения), 0, "Новая сумма", 15, 2);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СледующийДень(Команда)
	ТекДанные = Элементы.Состав.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекДанные.Время = КонецДня(ТекДанные.Время) + 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТекущееЗначениеВВыделенныеСтроки(Команда)
	ТекДанные = Элементы.Состав.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		мСтроки = Элементы.Состав.ВыделенныеСтроки;
		ТекКолонка = Элементы.Состав.ТекущийЭлемент.Имя;
		ИмяКолонки = ИмяДанных(ТекКолонка);
		ТекЗначение = ТекДанные[ИмяКолонки];
		Для каждого ИД Из мСтроки Цикл
			Объект.Состав.НайтиПоИдентификатору(ИД)[ИмяКолонки] = ТекЗначение;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СЛУЖЕБНЫЕ

// Автоматически определяет статью и коркошелёк
&НаКлиенте
Процедура АвтоСтатья()
	ТекДанные = Элементы.Состав.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ЗначениеЗаполнено(ТекДанные.Комментарий)
			И НЕ ЗначениеЗаполнено(ТекДанные.Статья) И НЕ ЗначениеЗаполнено(ТекДанные.КорКошелёк) Тогда
		СтрТекДанных = Новый Структура("Время,Сумма,Статья,КорКошелёк,Комментарий");
		ЗаполнитьЗначенияСвойств(СтрТекДанных, ТекДанные);
		РаспознавашкиКлиентСервер.РаспознатьВСтроке(СтрТекДанных);
		ЗаполнитьЗначенияСвойств(ТекДанные, СтрТекДанных);
	КонецЕсли;
КонецПроцедуры // АвтоСтатья

// Заполняет табчасть из табличного документа и сохраняет источник
&НаСервере
Процедура ЗаполнитьПоТД()
	ТабЗначений = ВОЛНА_ОбщегоНазначения_КлиентСервер.ЗагрузитьТаблицуЗначенийИзТабличногоДокумента(ИсточникЗаполнения);
	ТабЗначений.Сортировать("Время");
	Распознавашки = Неопределено;
	ТекУв = 10;
	ТекВып = 10;
	Для каждого СтрокаТЗ Из ТабЗначений Цикл
		НоваяСтрока = Объект.Состав.Вставить(0);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		РаспознавашкиКлиентСервер.РаспознатьВСтроке(НоваяСтрока, Распознавашки);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ПорядокПоВыписке) Тогда
			НоваяСтрока.ПорядокПоВыписке = ТекВып;
		КонецЕсли;
		ТекВып = НоваяСтрока.ПорядокПоВыписке + 10;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ПорядокПоУведомлению) Тогда
			НоваяСтрока.ПорядокПоУведомлению = ТекУв;
		КонецЕсли;
		ТекУв = НоваяСтрока.ПорядокПоУведомлению + 10;
	КонецЦикла;
	СохранённыйИсточник = ИсточникЗаполнения;
КонецПроцедуры // ЗаполнитьПоТД

&НаСервере
Процедура ЗаполнитьШапкуНаСервере(Перезаписывать)
	Если Перезаписывать ИЛИ НЕ ЗначениеЗаполнено(Объект.По_) Тогда
		Объект.По_ = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	КонецЕсли;
	#Область ДАТЫ_ТЧ
		НачДата = '39990101';
		Для каждого СтрокаТЧ Из Объект.Состав Цикл
			Если СтрокаТЧ.Время < НачДата Тогда
				НачДата = СтрокаТЧ.Время;
			КонецЕсли;
			Если СтрокаТЧ.Время > Объект.По_ Тогда
				Объект.По_ = СтрокаТЧ.Время;
			КонецЕсли;
		КонецЦикла;
		Если Объект.С > НачДата ИЛИ (НачДата < '39990101' И Объект.С = '00000000')Тогда
			Объект.С = НачДата;
		КонецЕсли;
	#КонецОбласти
	Если Перезаписывать ИЛИ НЕ ЗначениеЗаполнено(Объект.С) ИЛИ НЕ ЗначениеЗаполнено(Объект.ОстатокНаНачало) Тогда
		#Область ТЕКСТ_ЗАПРОСА
			Запрос = Новый Запрос(
					"ВЫБРАТЬ
					|	МАКСИМУМ(Деньги.Период) КАК Период
					|ИЗ
					|	РегистрНакопления.Деньги КАК Деньги
					|ГДЕ
					|	Деньги.Активность
					|	И Деньги.Кошелёк = &Кошелёк");
		#КонецОбласти 
		Запрос.УстановитьПараметр("Кошелёк", Объект.Кошелёк);
		Если Перезаписывать ИЛИ НЕ ЗначениеЗаполнено(Объект.С) Тогда
			Если НачДата = '39990101' Тогда
				Объект.С = НачалоМесяца(Объект.По_); 
				Выборка1 = Запрос.Выполнить().Выбрать();
				Если Выборка1.Следующий() И ЗначениеЗаполнено(Выборка1.Период) Тогда
					Объект.С = КонецДня(Выборка1.Период) + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Перезаписывать ИЛИ НЕ ЗначениеЗаполнено(Объект.ОстатокНаНачало) Тогда
			Объект.ОстатокНаНачало = 0;
			#Область ТЕКСТ_ЗАПРОСА
				Запрос.Текст =
						"ВЫБРАТЬ
						|	ДеньгиОбороты.ПоступлениеОборот КАК ПоступлениеОборот
						|ИЗ
						|	РегистрНакопления.Деньги.Обороты(, &Дата2, , Кошелёк = &Кошелёк) КАК ДеньгиОбороты";
			#КонецОбласти
			Запрос.УстановитьПараметр("Дата2", Объект.С - 1);
			Выборка1 = Запрос.Выполнить().Выбрать();
			Если Выборка1.Следующий() И ЗначениеЗаполнено(Выборка1.ПоступлениеОборот) Тогда
				Объект.ОстатокНаНачало = Выборка1.ПоступлениеОборот;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Перезаписывать ИЛИ НЕ ЗначениеЗаполнено(Объект.ОстатокНаКонец) Тогда
		Объект.ОстатокНаКонец = Объект.ОстатокНаНачало + Объект.Состав.Итог("Сумма");
	КонецЕсли;
	ОбновитьПоследнююОперацию();
КонецПроцедуры

// Возвращает имя колонки данных
// Параметры:
//  Элемент  - Строка - Имя элемента колонки
// Возвращаемое значение:
//   Строка   - Конец пути к данным элемента
&НаСервере
Функция ИмяДанных(Элемент)
	Путь = Элементы[Элемент].ПутьКДанным;
	ПозСлэша = СтрНайти(Путь, ".", НаправлениеПоиска.СКонца);
	Возврат ?(ПозСлэша = 0, Путь, Сред(Путь, ПозСлэша + 1))
КонецФункции // ИмяДанных

Функция КорДокиСервер()
	КорДоки = Объект.Состав.Выгрузить(, "Время,Сумма,Статья,КорКошелёк,КорДокумент");
	Для каждого СтрокаТЗ Из КорДоки Цикл
		СтрокаТЗ.Время = НачалоДня(СтрокаТЗ.Время);
	КонецЦикла;
	КорДоки.Свернуть("Время,КорКошелёк,Статья,КорДокумент", "Сумма");
	#Область ТЕКСТ_ЗАПРОСА
		Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ТабПараметр.Время КАК Время,
				|	ТабПараметр.КорКошелёк КАК КорКошелёк,
				|	ТабПараметр.КорДокумент КАК КорДокумент,
				|	ТабПараметр.Статья КАК Статья,
				|	ТабПараметр.Сумма КАК Сумма
				|ПОМЕСТИТЬ Исходная
				|ИЗ
				|	&ТабПараметр КАК ТабПараметр
				|ГДЕ
				|	ТабПараметр.КорКошелёк <> ЗНАЧЕНИЕ(Справочник.Кошельки.ПустаяСсылка)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Исходная.Время КАК Время,
				|	Исходная.КорКошелёк КАК КорКошелёк,
				|	Исходная.Статья КАК Статья,
				|	Исходная.КорДокумент КАК КорДокумент,
				|	Исходная.Сумма КАК Сумма,
				|	СУММА(ЕСТЬNULL(ДеньгиОбороты.ПоступлениеОборот, 0)) КАК ПоступлениеОборот,
				|	МАКСИМУМ(ДеньгиОбороты.Регистратор) КАК Регистратор
				|ПОМЕСТИТЬ СуммыВРегистре
				|ИЗ
				|	Исходная КАК Исходная
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Деньги.Обороты(&Дата1, &Дата2, Регистратор, ) КАК ДеньгиОбороты
				|		ПО Исходная.КорКошелёк = ДеньгиОбороты.Кошелёк
				|			И Исходная.Статья = ДеньгиОбороты.Статья
				|			И (Исходная.Время = НАЧАЛОПЕРИОДА(ДеньгиОбороты.Период, ДЕНЬ))
				|			И (Исходная.КорДокумент = ДеньгиОбороты.Регистратор
				|				ИЛИ Исходная.КорДокумент = ЗНАЧЕНИЕ(Документ.ВводДенег.ПустаяСсылка)
				|					И ДеньгиОбороты.Регистратор <> &Ссылка)
				|
				|СГРУППИРОВАТЬ ПО
				|	Исходная.Время,
				|	Исходная.КорКошелёк,
				|	Исходная.КорДокумент,
				|	Исходная.Сумма,
				|	Исходная.Статья
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ Исходная
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	СуммыВРегистре.Время КАК Время,
				|	СуммыВРегистре.КорКошелёк КАК КорКошелёк,
				|	СуммыВРегистре.Статья КАК Статья,
				|	СуммыВРегистре.КорДокумент КАК КорДокумент,
				|	-СуммыВРегистре.Сумма КАК Сумма,
				|	СуммыВРегистре.Регистратор КАК Регистратор,
				|	СуммыВРегистре.КорДокумент = ЗНАЧЕНИЕ(Документ.ВводДенег.ПустаяСсылка)
				|		И СуммыВРегистре.Регистратор ЕСТЬ NULL КАК НетСсылки
				|ПОМЕСТИТЬ Несовпадающие
				|ИЗ
				|	СуммыВРегистре КАК СуммыВРегистре
				|ГДЕ
				|	(СуммыВРегистре.Сумма <> -СуммыВРегистре.ПоступлениеОборот
				|			ИЛИ СуммыВРегистре.Сумма <> 0
				|				И СуммыВРегистре.КорДокумент = ЗНАЧЕНИЕ(Документ.ВводДенег.ПустаяСсылка))
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ СуммыВРегистре
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Несовпадающие.Время КАК Время,
				|	Несовпадающие.КорКошелёк КАК КорКошелёк,
				|	Несовпадающие.Статья КАК Статья,
				|	Несовпадающие.Сумма КАК Сумма
				|ПОМЕСТИТЬ БезКД
				|ИЗ
				|	Несовпадающие КАК Несовпадающие
				|ГДЕ
				|	Несовпадающие.НетСсылки
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	БезКД.Время КАК Время,
				|	БезКД.КорКошелёк КАК КорКошелёк,
				|	ВводДенег.Ссылка КАК Ссылка,
				|	ВводДенег.Дата КАК Дата
				|ПОМЕСТИТЬ НовыеКД
				|ИЗ
				|	БезКД КАК БезКД
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводДенег КАК ВводДенег
				|		ПО БезКД.КорКошелёк = ВводДенег.Кошелёк
				|			И БезКД.Время >= ВводДенег.С
				|			И БезКД.Время <= ВводДенег.По_
				|			И (ВводДенег.Проведен)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	НовыеКД.Время КАК Время,
				|	НовыеКД.КорКошелёк КАК КорКошелёк,
				|	МАКСИМУМ(НовыеКД.Дата) КАК Дата
				|ПОМЕСТИТЬ ДатыНовыхКД
				|ИЗ
				|	НовыеКД КАК НовыеКД
				|
				|СГРУППИРОВАТЬ ПО
				|	НовыеКД.Время,
				|	НовыеКД.КорКошелёк
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	НовыеКД.Время КАК Время,
				|	НовыеКД.КорКошелёк КАК КорКошелёк,
				|	МАКСИМУМ(НовыеКД.Ссылка) КАК Ссылка
				|ПОМЕСТИТЬ КДизСуществующих
				|ИЗ
				|	НовыеКД КАК НовыеКД
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыНовыхКД КАК ДатыНовыхКД
				|		ПО НовыеКД.Время = ДатыНовыхКД.Время
				|			И НовыеКД.КорКошелёк = ДатыНовыхКД.КорКошелёк
				|			И НовыеКД.Дата = ДатыНовыхКД.Дата
				|
				|СГРУППИРОВАТЬ ПО
				|	НовыеКД.Время,
				|	НовыеКД.КорКошелёк
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ НовыеКД
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ДатыНовыхКД
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	БезКД.Время КАК Время,
				|	БезКД.КорКошелёк КАК КорКошелёк,
				|	БезКД.Статья КАК Статья,
				|	ЗНАЧЕНИЕ(Документ.ВводДенег.ПустаяСсылка) КАК ВводДенег,
				|	БезКД.Сумма КАК Сумма,
				|	ЛОЖЬ КАК ПоСсылке,
				|	КДизСуществующих.Ссылка КАК НовыйКД
				|ПОМЕСТИТЬ СуммыБезУчётаУжеПроведённых
				|ИЗ
				|	БезКД КАК БезКД
				|		ЛЕВОЕ СОЕДИНЕНИЕ КДизСуществующих КАК КДизСуществующих
				|		ПО БезКД.Время = КДизСуществующих.Время
				|			И БезКД.КорКошелёк = КДизСуществующих.КорКошелёк
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Несовпадающие.Время,
				|	Несовпадающие.КорКошелёк,
				|	Несовпадающие.Статья,
				|	Несовпадающие.КорДокумент,
				|	Несовпадающие.Сумма,
				|	ИСТИНА,
				|	ВЫБОР
				|		КОГДА Несовпадающие.КорДокумент = ЗНАЧЕНИЕ(Документ.ВводДенег.ПустаяСсылка)
				|			ТОГДА Несовпадающие.Регистратор
				|		ИНАЧЕ Несовпадающие.КорДокумент
				|	КОНЕЦ
				|ИЗ
				|	Несовпадающие КАК Несовпадающие
				|ГДЕ
				|	НЕ Несовпадающие.НетСсылки
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ Несовпадающие
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ БезКД
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ КДизСуществующих
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	СуммыБезУчётаУжеПроведённых.Время КАК Время,
				|	СуммыБезУчётаУжеПроведённых.КорКошелёк КАК КорКошелёк,
				|	СуммыБезУчётаУжеПроведённых.Статья КАК Статья,
				|	СуммыБезУчётаУжеПроведённых.ВводДенег КАК ВводДенег,
				|	СуммыБезУчётаУжеПроведённых.Сумма - ЕСТЬNULL(СУММА(ВводДенегСостав.Сумма), 0) КАК Сумма,
				|	СуммыБезУчётаУжеПроведённых.ПоСсылке КАК ПоСсылке,
				|	СуммыБезУчётаУжеПроведённых.НовыйКД КАК НовыйКД,
				|	МАКСИМУМ(ВводДенегСостав.НомерСтроки) КАК НомерСтроки
				|ИЗ
				|	СуммыБезУчётаУжеПроведённых КАК СуммыБезУчётаУжеПроведённых
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводДенег.Состав КАК ВводДенегСостав
				|		ПО СуммыБезУчётаУжеПроведённых.НовыйКД = ВводДенегСостав.Ссылка
				|			И СуммыБезУчётаУжеПроведённых.Статья = ВводДенегСостав.Статья
				|			И (&Кошелёк = ВводДенегСостав.КорКошелёк)
				|			И (СуммыБезУчётаУжеПроведённых.Время = НАЧАЛОПЕРИОДА(ВводДенегСостав.Время, ДЕНЬ))
				|
				|СГРУППИРОВАТЬ ПО
				|	СуммыБезУчётаУжеПроведённых.Время,
				|	СуммыБезУчётаУжеПроведённых.КорКошелёк,
				|	СуммыБезУчётаУжеПроведённых.Статья,
				|	СуммыБезУчётаУжеПроведённых.ВводДенег,
				|	СуммыБезУчётаУжеПроведённых.ПоСсылке,
				|	СуммыБезУчётаУжеПроведённых.НовыйКД,
				|	СуммыБезУчётаУжеПроведённых.Сумма");
	#КонецОбласти 
	Запрос.УстановитьПараметр("Дата1", Объект.С);
	Запрос.УстановитьПараметр("Дата2", КонецДня(Объект.По_));
	Запрос.УстановитьПараметр("Кошелёк", Объект.Кошелёк);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТабПараметр", КорДоки);
	Отладка = Ложь;
	Если Отладка Тогда
		Запрос.Текст = ВОЛНА_ОбщегоНазначения_КлиентСервер.ОтменитьУничтожения(Запрос.Текст);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	ТабРезультат = Запрос.Выполнить().Выгрузить();
	Результат = Новый Соответствие;
	Для каждого Строчка Из ТабРезультат Цикл
		ТекЗ = Новый Структура("Сумма,Время,Статья,ПоСсылке,ВводДенег,НомерСтроки");
		ЗаполнитьЗначенияСвойств(ТекЗ, Строчка);
		ДанныеДока = Результат[Строчка.НовыйКД];
		Если ДанныеДока = Неопределено Тогда
			ДанныеДока = Новый Соответствие;
			Результат.Вставить(Строчка.НовыйКД, ДанныеДока);
		КонецЕсли;
		ДанныеКошелька = ДанныеДока[Строчка.КорКошелёк];
		Если ДанныеКошелька = Неопределено Тогда
			ДанныеКошелька = Новый Массив;
			ДанныеДока.Вставить(Строчка.КорКошелёк, ДанныеКошелька);
		КонецЕсли;
		ДанныеКошелька.Добавить(ТекЗ);
	КонецЦикла;
	Возврат Результат
КонецФункции

// Обновляет надпись о последней операции
&НаСервере
Процедура ОбновитьПоследнююОперацию()
	ПараметрДата = ?(ЗначениеЗаполнено(Объект.С), Объект.С, Объект.Дата);
	#Область ТЕКСТ_ЗАПРОСА
		Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Деньги.Период КАК Период,
				|	Деньги.Регистратор КАК Регистратор,
				|	Деньги.Поступление КАК Поступление,
				|	Деньги.Статья КАК Статья,
				|	Деньги.Комментарий КАК Комментарий
				|ИЗ
				|	РегистрНакопления.Деньги КАК Деньги
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводДенег КАК ВводДенег
				|		ПО Деньги.Регистратор = ВводДенег.Ссылка
				|ГДЕ
				|	Деньги.Кошелёк = &Кошелёк
				|	И (Деньги.Период < &ПараметрДата
				|			ИЛИ Деньги.Период = &ПараметрДата
				|				И ВводДенег.Дата < &ПараметрМВ)
				|
				|УПОРЯДОЧИТЬ ПО
				|	Деньги.Период УБЫВ,
				|	ВводДенег.Дата УБЫВ,
				|	Деньги.НомерСтроки");
	#КонецОбласти
	Запрос.УстановитьПараметр("ПараметрДата", ПараметрДата);
	Запрос.УстановитьПараметр("Кошелёк", Объект.Кошелёк);
	Запрос.УстановитьПараметр("ПараметрМВ", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, '39991231235959'));
	ВыбРезультат = Запрос.Выполнить().Выбрать();
	Элементы.НадписьПоследняяОперация.Заголовок =
			?(ВыбРезультат.Следующий(),
				"Прошлая операция от " + ВыбРезультат.Период + " на сумму " + ВыбРезультат.Поступление + " (" + ВыбРезультат.Комментарий + "," + ВыбРезультат.Статья + "), сделана " + ВыбРезультат.Регистратор,
				"Предыдущая операция кошелька не обнаружена");
КонецПроцедуры // ОбновитьПоследнююОперацию

&НаСервере
Процедура ОткрытьТД_()
	ИсточникЗаполнения = СохранённыйИсточник;
КонецПроцедуры

&НаСервере
Процедура ОткрытьШаблонНаСервере()
	НовыйМакет = Документы.ВводДенег.ПолучитьМакет("КЗагрузке");
	ИсточникЗаполнения = НовыйМакет;
КонецПроцедуры

// Пересчитывает остатки построчно
&НаКлиенте
Процедура ПересчитатьОстатки()
	Колво = Объект.Состав.Количество();
	ТекОстаток = Объект.ОстатокНаНачало;
	Для ЁХХ = 1 По Колво Цикл
		СтрокаТЧ = Объект.Состав[Колво - ЁХХ];
		ТекОстаток = ТекОстаток + СтрокаТЧ.Сумма;
		СтрокаТЧ.ОстатокПослеОперации = ТекОстаток;
	КонецЦикла;
	Объект.ОстатокНаКонец = ТекОстаток;
КонецПроцедуры // ПересчитатьОстатки

// Присваивает порядковые номерапо выписке и уведомлениям там, где их нет
&НаКлиенте
Процедура ПрисвоитьПорядковыеНомера()
	Для каждого СтрокаТЧ Из Объект.Состав Цикл
		Колво = Объект.Состав.Количество();
		ПроверитьПорядковыйНомер(СтрокаТЧ, "ПорядокПоВыписке", СтрокаТЧ.НомерСтроки, Колво);
		ПроверитьПорядковыйНомер(СтрокаТЧ, "ПорядокПоУведомлению", СтрокаТЧ.НомерСтроки, Колво);
	КонецЦикла;
КонецПроцедуры // ПрисвоитьПорядковыеНомера

&НаКлиенте
Процедура ПроверитьПорядковыйНомер(СтрокаТЧ, ИмяРеквизита, НомерСтроки, Строк)
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ[ИмяРеквизита]) Тогда
		Если НомерСтроки = 1 Тогда
			Если Строк = 1 Тогда
				СтрокаТЧ[ИмяРеквизита] = 100
			Иначе
				СтрокаТЧ[ИмяРеквизита] = Объект.Состав[1][ИмяРеквизита] + 10;
			КонецЕсли;
		ИначеЕсли НомерСтроки = Строк Тогда
			СтрокаТЧ[ИмяРеквизита] = Объект.Состав[Строк - 2][ИмяРеквизита] / 2;
		Иначе
			СтрокаТЧ[ИмяРеквизита] = (Объект.Состав[НомерСтроки][ИмяРеквизита] + Объект.Состав[НомерСтроки - 2][ИмяРеквизита]) / 2;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПрисвоитьПорядковыеНомера

// Добавляет строку под текущей и вводит корректировочную сумму
// Параметры:
//  НоваяСумма  - Число - Результат обрабочика
//  СтруктураПараметров  - Структура - Параметры, переданные из обрабочика
&НаКлиенте
Процедура ПродолжитьПриведениеКОстатку(НоваяСумма, СтруктураПараметров = Неопределено) Экспорт
	Если НоваяСумма <> Неопределено Тогда
		НоваяСтрока = Объект.Состав.Вставить(СтруктураПараметров.ТекНС);
		ЕстьЕщё = Объект.Состав.Количество() > СтруктураПараметров.ТекНС + 1;
		Если ЕстьЕщё Тогда
			ПрошлаяЗапись = Объект.Состав[СтруктураПараметров.ТекНС + 1];
			ПрошлоеВремя = ПрошлаяЗапись.Время;
			ПрошлаяВып = ПрошлаяЗапись.ПорядокПоВыписке;
			ПрошлаяУв = ПрошлаяЗапись.ПорядокПоУведомлению;
		Иначе
			ПрошлоеВремя = Объект.С;
			ПрошлаяВып = 0;
			ПрошлаяУв = 0;
		КонецЕсли;
		НоваяСтрока.Время = ?(СтруктураПараметров.ТекВремя = НачалоДня(СтруктураПараметров.ТекВремя) ИЛИ СтруктураПараметров.ТекВремя <= ПрошлоеВремя,
				СтруктураПараметров.ТекВремя, СтруктураПараметров.ТекВремя - 1);
		НоваяСтрока.Сумма = НоваяСумма - СтруктураПараметров.СтараяСумма;
		НоваяСтрока.ПорядокПоВыписке = (СтруктураПараметров.ТекВып + ПрошлаяВып) / 2;
		НоваяСтрока.ПорядокПоУведомлению = (СтруктураПараметров.ТекУв + ПрошлаяУв) / 2;
		НоваяСтрока.Комментарий = "Невыясненные";
		НоваяСтрока.Статья = СтатьяНевыясненных;
	КонецЕсли;
КонецПроцедуры // ПродолжитьПриведениеКОстатку

#КонецОбласти

